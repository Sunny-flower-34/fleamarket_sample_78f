= form_for @product do |f|
  #image-box
    #previews
    - if @product.persisted?
      - @product.images.each_with_index do |image, i|
        = image_tag image.src.url, data: { index: i }, width: "100", height: '100'
    = f.fields_for :images do |image|
      .js-file_group{"data-index" => "#{image.index}"}
        = image.file_field :name, class: 'js-file'
        %br/
        %span.js-remove 削除
      - if @product.persisted?
        = image.check_box :_destroy, data:{ index: image.index }, class: 'hidden-destroy'
    - if @product.persisted?
      .js-file_group{"data-index" => "#{@product.images.count}"}
        = file_field_tag :name, name: "product[images_attributes][#{@product.images.count}][name]", class: 'js-file'
        .js-remove 削除
  商品名#{f.text_field :name, placeholder: '40文字まで', class: "product-name"}
  %br/
  商品説明#{f.text_area :text, placeholder: '商品の説明（必須　1,000文字以内）', class: "product-text"}
  %br/
  .product-datas
    .info
      カテゴリ#{f.text_field :category_id, placeholder: '必須', class: "info__category"}
      %br/
      商品の状態#{f.text_field :condition, placeholder: '必須', class: "info__status"}
      %br/
    .shipping   
      配送料の負担#{f.text_field :postage, placeholder: '必須', class: "shipping__postage"}
      %br/
      発送日の目安#{f.text_field :days, placeholder: '必須', class: "shipping__days"}
      %br/
      発送エリア#{f.text_field :area, placeholder: '必須', class: "shipping__area"}
      %br/
    .price
      価格#{f.number_field :price, placeholder: '0', class: ".price__date"}
      %br/

  = f.submit

-# fields_forメソッドを利用する際に、親モデルの中に書く必要があるメソッドとして、”accepts_nested_attributes_for”がある。
-# form_forメソッドを使用して、ネストの関係性でfields_forを利用してあげる。そうする事で、image画像を追加するためのfile_fieldメソッドを使用する事ができる。

